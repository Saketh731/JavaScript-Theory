Call Stack
    - Whatever comes into the callstack is executed immediately and callstack will not wait or pause for anyone. Callstack does not have a timer.

Web API
    - Web API consits of global object (window incase of browser), console, fetch, setTimeout, DOM APIs .... It stores all the callbacks in a Web API environment till the timer finishes or event occurs. Then it pushes to Callback Queue

Callback Queue
    -  From Web API environment, callbacks come her to be executed. From here it will be pushed to callstack one by one when the callstack gets empty

Event Loop
    - Event loop is between Callback Queue and Call Stack. It checks whether the Call Stack is empty or no and when empty it takes a Callback function from Queue and pushes it into the Callstack

Microtask Queue for fetch() 
    - If there are any fetch calls and after receiving the response, when resolving the promise the callback function will be executd. These Promise related calback fucntions are send to Web API like other callbacks, but from ther it is sent to something called as Microtask Queue, which is more priority then Callback Queue.
      Microtask Queue has more priority then Callback Queue
      When there are many nested fetch calls inside a promise then it will lead to something called as 'Starvation' as the Microtask Queue will be over filled and the Callback Queue have to wait like forever for its chance
      **Only Primised and Mutation observer APIs (When DOM gets mutated new MutationObserver(callback) will get a callback which will be executed) will be stored in the Microtask Queues.
