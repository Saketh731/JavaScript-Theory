Symbol
======
Object property keys maybe either string type or symbol type.
A “symbol” represents a unique identifier.
let id = Symbol(); //id represents a unique symbol
(or)
let id = Symbol("name")

Symbols are guaranteed to be unique :
-----------------------------------
let id1 = Symbol("id");
let id2 = Symbol("id");

alert(id1 == id2); // false

NOTE: Symbols wont implicitly convert to string type. We need to explicitly call toString() method on it. As both string and symbol are different.  
      Ex: let id = Symbol("id");
       	  alert(id); // TypeError: Cannot convert a Symbol value to a string
	  alert(id.toString()); // Symbol(id)
          alert(id.description); // id


Hidden (Private) Properties
===========================
If we are working on another user's object (i.e third party code) we should not alter it.
But if we want to add an entry for our own internal use then we should go for symbol.

Ex:

let user = { // belongs to another code
  name: "John"
};
let id = Symbol("id");
user[id] = 1;
alert( user[id] ); // we can access the data using the symbol as the key


Symbols in an object literal
============================
let id = Symbol("id");

let user = {
  name: "John",
  [id]: 123 		// not "id": 123
};

Symbols are skipped by for...in
-------------------------------
let id = Symbol("id");
let user = {
  name: "John",
  age: 30,
  [id]: 123
};

for (let key in user) alert(key); // name, age 

// the direct access by the symbol works
alert( "Direct: " + user[id] );  // Direct: 123

**In contrast, Object.assign copies both string and symbol properties:**
  ===================================================================
let id = Symbol("id");
let user = {
  [id]: 123
}; 
let clone = Object.assign({}, user);
alert( clone[id] ); // 123


Global Symbols
==============
To achieve this, there exists a global symbol registry. 

Ex:

// read from the global registry
let id = Symbol.for("id"); // if the symbol did not exist in global symbol registry, it is created

// read it again (maybe from another part of the code)
let idAgain = Symbol.for("id");

// the same symbol
alert( id === idAgain ); // true
