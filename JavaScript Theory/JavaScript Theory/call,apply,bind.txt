call, apply, bind are used in inheritance:   Using this we get the instance (or object) specific properties & methods
and also the methods and properties defined in its prototype. This is same as => new Person(). Unlike Student.__proto__ = Object.create(Person.prototype) 
where we get access to only those methods & properties defined in the Person prototype

You can change the context of this for a function by calling these methods on that particular function 


call()
------
The call() method calls a function with a given this value and arguments provided individually.
**The call() allows for a function/method belonging to one object to be assigned and called for a different objec
**call() accepts an argument list, while apply() accepts a single array of arguments.


Ex:
function Product(name, price) {
  this.name = name;
  this.price = price;
}

function Food(name, price) {
  Product.call(this, name, price);
  this.category = 'food';
}

console.log(new Food('cheese', 5).name);



apply()
-------

Ex1:
const numbers = [5, 6, 2, 3, 7];

const max = Math.max.apply(null, numbers);

console.log(max);
// expected output: 7

const min = Math.min.apply(null, numbers);

console.log(min);


***Ex1: 
const array = ['a', 'b'];
const elements = [0, 1, 2];
array.push.apply(array, elements);
console.info(array); // ["a", "b", 0, 1, 2]

//NOTE: If we we write directly as array.push(elements), we'll get an array inside an array, which is not what we want



bind()
------
The bind() method creates and returns a new function that when called. So that we can use it later in the future

Ex:
const module = {
  x: 42,
  getX: function() {
    return this.x;
  }
};

const unboundGetX = module.getX;
console.log(unboundGetX()); // The function gets invoked at the global scope
// expected output: undefined

const boundGetX = unboundGetX.bind(module);
console.log(boundGetX());
// expected output: 42


