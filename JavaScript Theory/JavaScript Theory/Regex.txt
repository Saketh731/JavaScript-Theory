JavaScript Regular Expressions
==============================
A regular expression is a sequence of characters that forms a search pattern.
The search pattern can be used for text search and text replace operations.

Syntax:
-------
/pattern/modifiers;


Using String Methods
--------------------
In JavaScript, regular expressions are often used with the two string methods:
1. search() 
2. replace()

Using String search() With a String
-----------------------------------

Ex:
var str = "Visit W3Schools!";
var n = str.search("W3Schools");  //6



Using String search() With a Regular Expression
-----------------------------------------------
var str = "Visit W3Schools";
var n = str.search(/w3schools/i); //6	


Using String replace() With a String
------------------------------------
var str = "Visit Microsoft!";
var res = str.replace("Microsoft", "W3Schools");  //Visit W3Schools!


Use String replace() With a Regular Expression
----------------------------------------------
var str = "Visit Microsoft!";
var res = str.replace(/microsoft/i, "W3Schools");  //Visit W3Schools!


NOTE: Regular expressions arguments can make your search much more powerful (case insensitive for example).




Regular Expression Modifiers
----------------------------

Modifier			Description	
-------				-----------
i			Perform case-insensitive matching	
g			Perform a global match (find all matches rather than stopping after the first match)	
m			Perform multiline matching



Ex1:  var str = "Visit W3Schools";
     var patt1 = /w3schools/i;
     var result = str.match(patt1);  // W3Schools


Ex2: var str = "\nIs th\nis it?";
     var patt1 = /^is/m;
     var result = str.match(patt1);  //is



() are useful in below case:
----------------------------

Ex:  var str = "re, green, red, green, gren, gr, blue, yellow";
     var patt1 = /(red|green)/g;
     var result = str.match(patt1);  //green,red,green




[abc]	Find any of the characters between the brackets	
[0-9]	Find any of the digits between the brackets	
(x|y)	Find any of the alternatives separated with |





\d	Find a digit	
\s	Find a whitespace character	
\b	Find a match at the beginning of a word like this: \bWORD, or at the end of a word like this: WORD\b	
\uxxxx	Find the Unicode character specified by the hexadecimal number xxxx



n+	Matches any string that contains at least one n
n*	Matches any string that contains zero or more occurrences of n
n?	Matches any string that contains zero or one occurrences of n



Using test()
============
The test() method is a RegExp expression method.
It searches a string for a pattern, and returns true or false, depending on the result.

Ex:
var patt = /e/;
patt.test("The best things in life are free!");  //true
 	



Using exec()
============
The exec() method is a RegExp expression method.
It searches a string for a specified pattern, and returns the found text as an object.
If no match is found, it returns an empty (null) object.


Ex:
<script>
var obj = /e/.exec("The best things in life are free!");
document.getElementById("demo").innerHTML =
"Found " + obj[0] + " in position " + obj.index + " in the text: " + obj.input;
</script>

Output:
Found e in position 2 in the text: The best things in life are free!






MDN
===

Assertions
----------
Assertions include boundaries
^,$,
\b - Matches a word boundary. This is the position where a word character is not followed or preceded by another word-character, such as between a letter


Character classes
-----------------
. , [^] - even matches new lines unlike [.]
\d, \D, \w, \W, \s, \S, \n, \t, [\b] - backspace

Note: \ - indicates that the character should be escaped or treated specially.  (i.e) for special characters to non-special: (ex: * as \*), 
	  and non-special characters to be special: (ex: b as \b) 

Lookahead: x(?=y)
Negative lookahead: x(?!y)

Lookbehind: (?<=y)x
Negative lookbehind: (?<!y)x



Groups and ranges
-----------------
x|y
[xyz] [^xyz]
[a-c] [^a-c]

**Capturing group:
(x) - Matches x and remembers the match  EX: /apple(,)\sorange\1/ matches "apple, orange,"

**Named capturing group:
(?<Name>x)

**Non-capturing group: (Matches "x" but does not remember the match.)
(?:x)




Quantifiers
-----------
x*
x+
x?
x{n}
x{n,}
x{n,m}


****NOTE****
   -----
By default quantifiers like * and + are "greedy", meaning that they try to match as much of the string as possible. 
The ? character after the quantifier makes the quantifier "non-greedy": meaning that it will stop as soon as it finds a match.

Ex: "some <foo> <bar> new </bar> </foo> thing"
    /<.*>/ will match "<foo> <bar> new </bar> </foo>"
    /<.*?>/ will match "<foo>"

x*?
x+?
x??
x{n}?
x{n,}?
x{n,m}?



Regular expression flags
========================

Flag	Description
----	-----------	
g	Global search.	
i	Case-insensitive search.	
m	Multi-line search.	
s	Allows . to match newline characters.	
u	"unicode"; treat a pattern as a sequence of unicode code points.	
y	Perform a "sticky" search that matches starting at the current position in the target string.





Methods that use regular expressions:
====================================
Method							Description
------							-----------
exec()				Executes a search for a match in a string. It returns an array of information or null on a mismatch.
test()				Tests for a match in a string. It returns true or false.
match()				Returns an array containing all of the matches, including capturing groups, or null if no match is found.
matchAll()			Returns an iterator containing all of the matches, including capturing groups.
search()			Tests for a match in a string. It returns the index of the match, or -1 if the search fails.
replace()			Executes a search for a match in a string, and replaces the matched substring with a replacement substring.
replaceAll()			Executes a search for all matches in a string, and replaces the matched substrings with a replacement substring.
split()				Uses a regular expression or a fixed string to break a string into an array of substrings.





Password: .*([A-Z]|[\W]|\d)+.*([A-Z]|[\W]|\d)+.*([A-Z]|[\W]|\d)+.*               ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]{8,}

Numbers: \b[7-9][0-9]{9}\b(?= |)

International Number: (\+\d\d?[- ]?)?\(?\d{3}\)?[- ]?\d{3}[- ]?\d{4}

Website: (http|https)://(www.)?[\w\d]*[.](com|in|org)/([\w\d_]+(/|))*(\?([\w\d]+=[\w\d]+(&|))+)?(\#[\w\d]+)?

Email: [a-z0-9A-z][a-z0-9A-Z_.]{4,}@[a-z0-9A-Z]+[.][a-zA-Z]{2,}
