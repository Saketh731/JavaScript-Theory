NOTE: You can achieve the asyncronous benifits using the callbacks (async callback) like in eventListeners, XMLHttpRequest etc..

Call back functions are passed as an arguments inside a function.
These call back functions are not executed immediatly as they are passed with their reference and not as function calls.
(Like in eventListeners)
So they are "called back" after a specific condition. (hence the name)
The condition can be anything like Ex: a usr clicks a button (or) if a value matches a specified value (in our own implementation) we can call back the passed function with reference.

NOTE: The containing function is responsible for executing the callback function when the time comes. 


Async Callback
--------------

Ex:
btn.addEventListener('click', () => {
  alert('You clicked me!');

  let pElem = document.createElement('p');
  pElem.textContent = 'This is a newly-added paragraph.';
  document.body.appendChild(pElem);
});


Note: Callback function waits for the user to perform click event and then called back (callback function is called) to execute


Sync Callback
-------------
const gods = ['Apollo', 'Artemis', 'Ares', 'Zeus'];

gods.forEach(function (eachName, index){
  console.log(index + '. ' + eachName);
});

Note: Callback function doesn't wait for anything â€” it runs immediately.