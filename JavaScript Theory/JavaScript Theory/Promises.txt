"It Promises a Result!"


Producing code
--------------
"Producing code" is code that can take some time

Consuming code
--------------
"Consuming code" is code that must wait for the result

****A Promise is a JavaScript object that links producing code and consuming code


Promise Object
==============
A JavaScript Promise object contains both the producing code and calls to the consuming code

Ex: 
let myPromise = new Promise(function(myResolve, myReject) {
// "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);


When we get result in producing code, we call any of two:

Result			Call
------			----
Success		myResolve(result value)
Error		myReject(error object)



Promise Object Properties
=========================
1. state
2. result


Note: A JavaScript Promise object can be in any of the following states:
----
Pending
Fulfilled
Rejected

myPromise.state			myPromise.result
---------------			----------------
"pending"			undefined
"fulfilled"			a result value
"rejected"			an error object



*****NOTE: You cannot access the Promise properties state and result.
	   You must use a Promise method to handle promises.

Promise.then() takes 2 arguments:

NOTE:   myPromise.then(
  	function(value) { /* code if successful */ },
  	function(error) { /* code if some error */ }
	);

	// Both the callback functions are optional

Example:
--------
<p id="demo"></p>

<script>
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

let myPromise = new Promise(function(myResolve, myReject) {
  let x = 0;

	//x=5

  if (x == 0) {
    myResolve("OK");
  } else {
    myReject("Error");
  }
});

myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
</script>



Advantages of Promises over callbacks
=====================================
Waiting for Timeout
===================
callback
--------
<script>
setTimeout(function() { myFunction("I love You !!!"); }, 3000);

function myFunction(value) {
  document.getElementById("demo").innerHTML = value;
}
</script>


Promises
--------
<script>
let myPromise = new Promise(function(myResolve, myReject) {
  setTimeout(function(){ myResolve("I love You !!"); }, 3000);
});

myPromise.then(function(value) {
  document.getElementById("demo").innerHTML = value;
});
</script>

Waiting for File
================
callback
--------
<script>
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

function getFile(myCallback) {
  let req = new XMLHttpRequest();
  req.open('GET', "mycar.html");
  req.onload = function() {
    if (req.status == 200) {
      myCallback(this.responseText);
    } else {
      myCallback("Error: " + req.status);
    }
  }
  req.send();
}

getFile(myDisplayer); 
</script>


Promises
--------
<script>
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}

let myPromise = new Promise(function(myResolve, myReject) {
  let req = new XMLHttpRequest();
  req.open('GET', "mycar.html");
  req.onload = function() {
    if (req.status == 200) {
      myResolve(req.response);
    } else {
      myReject("File not Found");
    }
  };
  req.send();
});

myPromise.then(
  function(value) {myDisplayer(value);},
  function(error) {myDisplayer(error);}
);
</script>

Note: As most people are consumers of already-created promises, we can just write the consume code
      And in Promises production code and consuming code are seperate unlike callbacks.





From MDN
========
A promise is a returned object to which you attach callbacks, instead of passing callbacks into a function


Advantages
----------
1. Callbacks will never be called before the completion of the current run of the JavaScript event loop.
2. Callbacks added with then() will be called even after the success or failure of the asynchronous operation.
3. Multiple callbacks may be added by calling then() several times. Each callback is executed one after another, in the order in which they were inserted.
   One of the great things about using promises is chaining.

****NOTE: Chaining is much better than nesting, as it is much cleaner


Chaining
--------
A common need is to execute two or more asynchronous operations back to back, where after start after the previous operation succeeds and gives result.
We accomplish this by creating a promise chain.

NOTE: Every then() function returns a new promise, different from the original
      When thats the case, any callbacks added to newPromise gets queued behind the previous promise callbacks


With callbacks  (results in a problem called callback pyramid or callback hell)
--------------
doSomething(function(result) {
  doSomethingElse(result, function(newResult) {
    doThirdThing(newResult, function(finalResult) {
      console.log('Got the final result: ' + finalResult);
    }, failureCallback);
  }, failureCallback);
}, failureCallback);


With promise chaining 
---------------------
(i.e) we attach our callbacks to the returned promises instead, forming a promise chain:

doSomething()
.then(function(result) {
  return doSomethingElse(result);
})
.then(function(newResult) {
  return doThirdThing(newResult);
})
.then(function(finalResult) {
  console.log('Got the final result: ' + finalResult);
})
.catch(failureCallback);

//****NOTE: Always return results, otherwise callbacks won't catch the result of a previous promise
	    .catch(failureCallback) is shortform for .then(null, failureCallback)


Chaining after a catch
----------------------
It's possible to chain after a failure, i.e. a catch, which is useful to accomplish new actions even after an action failed in the chain

Ex:
new Promise((resolve, reject) => {
    console.log('Initial');

    resolve();
})
.then(() => {
    throw new Error('Something failed');
        
    console.log('Do this');
})
.catch(() => {
    console.error('Do that');
})
.then(() => {
    console.log('Do this, no matter what happened before');
});

Output
------
Initial
Do that
Do this, no matter what happened before


Note: The text Do this is not displayed because the Something failed, error caused a rejection


NOTE: In callback pyramid we have passed failureCallback callback function 3 times. But in promises we caught only once. This is a big advantage.
      If there's an exception, the browser will look down the chain for .catch() handlers or onRejected. So using promise we can catch all error at a single step.


Promise rejection events
------------------------
Whenever a promise is rejected, one of two events is sent to the global scope (Window)

1. rejectionhandled
   ----------------
   Here rejection has been handled by the executor's reject function

2. unhandledrejection
   ------------------
   Here rejection is not handled and send to global object to handle

// Just like exception handling in java.... here it is error handling by window object



Wrapping setTimeout with promises
---------------------------------
As for setTimeout you need to pass success and failure callbacks manually, its better to wrap them in promises
const wait = ms => new Promise(resolve => setTimeout(resolve, ms));

wait(10*1000).then(() => saySomething("10 seconds")).catch(failureCallback);

NOTE: Here the promise constructor takes an executor function as argument


Promise.all() 
------------
For running asynchronous operations in parallel.

We can start operations in parallel and wait for them all to finish like this:
Ex:
Promise.all([func1(), func2(), func3()])
.then(([result1, result2, result3]) => { /* use result1, result2 and result3 */ });


Task queues vs microtasks
=========================
Promise callbacks are handled as a Microtask whereas setTimeout() callbacks are handled as Task queues.
Ex:
const promise = new Promise(function(resolve, reject) {
  console.log("Promise callback");
  resolve();
}).then(function(result) {
  console.log("Promise callback (.then)");
});

setTimeout(function() {
  console.log("event-loop cycle: Promise (fullfilled)", promise)
}, 0);

console.log("Promise (pending)", promise);

Output:
Promise callback
Promise (pending) Promise {<pending>}
Promise callback (.then)
event-loop cycle: Promise (fullfilled) Promise {<fulfilled>}



Static methods
==============

1. Promise.all(iterable)	
   ---------------------
   Wait for all promises to be resolved, or for any to be rejected.

2. Promise.allSettled(iterable)
   ----------------------------
   Wait until all promises have settled (each may resolve or reject).

3. Promise.any(iterable)
   ---------------------
   As soon as one of the promises in the iterable fulfills, returns a single promise

4. Promise.race(iterable)
   ----------------------
   Wait until any of the promises is resolved or rejected and retruns that particular promise only.

5. Promise.reject(reason)
   ----------------------

6. Promise.resolve(value)
   ----------------------




Instance methods
================

1. Promise.prototype.catch()
2. Promise.prototype.then()
3. Promise.prototype.finally()  //will be executed regardless of the outcome i.e either reject or resolve   //called when the Promise is settled.











Check => 1. promise.all() - rejection ,  .catch() - rejection