Class Syntax
------------
NOTE:
A class can't be redefined. Attempting to do so produces a SyntaxError.


Use the keyword class to create a class.
Always add a method named constructor()
The constructor method is called automatically when a new object is created.
If you do not define a constructor method, JavaScript will add an empty constructor method

NOTE:
A JavaScript class is not an object.
It is a template for JavaScript objects.
You can use the class to create objects

Ex:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
}

let myCar1 = new Car("Ford", 2014);
let myCar2 = new Car("Audi", 2019);


NOTE: The example above uses the Car class to create two Car objects.



The Constructor Method
----------------------
The constructor method is a special method:

It has to have the exact name "constructor"
It is executed automatically when a new object is created
It is used to initialize object properties


Class Methods
-------------
Class methods are created with the same syntax as object methods.
Step-1 => Use the keyword class to create a class.
Step-2 => Always add a constructor() method.
Step-3 => Then add any number of methods.

Ex1:
class ClassName {
  constructor() { ... }
  method_1() { ... }
  method_2() { ... }
  method_3() { ... }
  }
}

You can also send parameters to Class methods:
Ex2:
class Car {
  constructor(name, year) {
    this.name = name;
    this.year = year;
  }
  age(x) {
    return x - this.year;
  }
}

let date = new Date();
let year = date.getFullYear();

let myCar = new Car("Ford", 2014);
document.getElementById("demo").innerHTML=
"My car is " + myCar.age(year) + " years old.";




***MDN***
=========

Defining classes
----------------
Classes are in fact "special functions", and just as you can define function expressions and function declarations, 
the class syntax has two components: class expressions and class declarations.


Class declarations
------------------
To declare a class, you use the class keyword with the name of the class 

Ex:
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
}


****NOTE****  
============
An important difference between function declarations and class declarations is that function declarations are hoisted and class declarations are not. 
You first need to declare your class and then access it, otherwise code like the following will throw a ReferenceError
Ex:
const p = new Rectangle(); // ReferenceError
class Rectangle {}


Class expressions
-----------------
Class expressions can be named or unnamed
The name given to a named class expression is local to the class's body (it can be retrieved through the class's name property, though)
NOTE: Even Class expressions are not hoisted same as Class declarations

Ex:
// unnamed
let Rectangle = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);
// output: "Rectangle"

// named
let Rectangle = class Rectangle2 {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
console.log(Rectangle.name);
// output: "Rectangle2"






Class body and method definitions
=================================

Body
----
The body of a class is the part that is in curly brackets {}. This is where you define class members, such as methods or constructor.


Constructor
-----------
The constructor method is a special method for creating and initializing an object created with a class
NOTE: There should be only one constructor in a class or else SyntaxError will be thrown
      A constructor can use the super keyword to call the constructor of the super class.


Prototype methods
-----------------
Ex:
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
  // Getter
  get area() {
    return this.calcArea();
  }
  // Method
  calcArea() {
    return this.height * this.width;
  }
}

const square = new Rectangle(10, 10);
console.log(square.area); // 100




Static methods and properties
-----------------------------
The static keyword defines a static method or static property for a class
***NOTE: Static members (properties and methods) are called without instantiating their class and cannot be called through a class instance

Static methods are often used to create utility functions for an application
Static properties are useful for caches, fixed-configuration, or any other data you don't need to be replicated across instances.

Ex:
class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }

  static displayName = "Point";
  static distance(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;

    return Math.hypot(dx, dy);
  }
}

const p1 = new Point(5, 5);
const p2 = new Point(10, 10);
p1.displayName; // undefined
p1.distance;    // undefined
p2.displayName; // undefined
p2.distance;    // undefined

console.log(Point.displayName);      // "Point"
console.log(Point.distance(p1, p2)); // 7.0710678118654755


*****
Same As Below:
****NOTE: Static methods   => Person.displayName = function(){}            //Accesible only using Person. (i.e by class name only)
          Prototype methods => Person.prototype.displayName = function(){}  //Accesible for all Person class instances
Same follows with the Properties



Binding this with prototype and static methods
----------------------------------------------
Inside static method this will refer to the constructor function or class(in ES6)
Inside prototype method this will refer to the object instance upon which the method is called on
Note: Assigning the method to a variable and then calling it, the this value will be undefined inside the method.

Ex:
class Animal {
  speak() {
    return this;
  }
  static eat() {
    return this;
  }
}

let obj = new Animal();
obj.speak(); // the Animal object
let speak = obj.speak;
speak(); // undefined

Animal.eat() // class Animal
let eat = Animal.eat;
eat(); // undefined



If we rewrite the above using traditional function-based syntax in non–strict mode, 
then this will refer to the global object here

Ex:
function Animal() { }

Animal.prototype.speak = function() {
  return this;
}

Animal.eat = function() {
  return this;
}

let obj = new Animal();
let speak = obj.speak;
speak(); // global object (in non–strict mode)

let eat = Animal.eat;
eat(); // global object (in non-strict mode)





Instance properties and methods
-------------------------------
Instance properties and methods must be defined inside of class methods:

Ex:
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
}


Static Properties and Prototype properties
------------------------------------------
Static (class-side) data properties and prototype data properties must be defined outside of the ClassBody declaration:

Ex:
Rectangle.staticWidth = 20;
Rectangle.prototype.prototypeWidth = 25;





Field declarations
==================

Public field declarations
-------------------------
The fields can be declared with or without a default value
Ex:
class Rectangle {
  #height = 0;
  #width;
  constructor(height, width) {
    this.#height = height;
    this.#width = width;
  }
}


Private field declarations
--------------------------
It's an error to reference private fields from outside of the class; they can only be read or written within the class body
By doing this the class users does not depend on internals which may change in future

Ex:
class Rectangle {
  #height = 0;
  #width;
  constructor(height, width) {
    this.#height = height;
    this.#width = width;
  }
}


***NOTE: Private fields can only be declared up-front in a field declaration.
         Private fields cannot be created later through assigning to them





Sub classing with extends
=========================
The extends keyword is used in class declarations or class expressions to create a class as a child of another class.

1.
Ex:
class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a noise.`);
  }
}

class Dog extends Animal {
  constructor(name) {
    super(name); // call the super class constructor and pass in the name parameter
  }

  speak() {
    console.log(`${this.name} barks.`);
  }
}

let d = new Dog('Mitzie');
d.speak(); // Mitzie barks.


****NOTE: If there is a constructor present in the subclass, it needs to first call super() before using "this".


2.
**We can also extend traditional function-based "classes":

Ex:
function Animal (name) {
  this.name = name;
}

Animal.prototype.speak = function () {
  console.log(`${this.name} makes a noise.`);
}

class Dog extends Animal {
  speak() {
    console.log(`${this.name} barks.`);
  }
}

let d = new Dog('Mitzie');
d.speak(); // Mitzie barks.

// For similar methods, the child's method takes precedence over parent's method


3.
**Note that classes cannot extend regular (non-constructible) objects. If you want to inherit from a regular object, 
  you can instead use Object.setPrototypeOf():

Ex:
const Animal = {
  speak() {
    console.log(`${this.name} makes a noise.`);
  }
};

class Dog {
  constructor(name) {
    this.name = name;
  }
}

// If you do not do this you will get a TypeError when you invoke speak
Object.setPrototypeOf(Dog.prototype, Animal);

let d = new Dog('Mitzie');
d.speak(); // Mitzie makes a noise.




 
Super class calls with super
============================
The super keyword is used to call corresponding methods of super class.

Ex:
class Cat {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a noise.`);
  }
}

class Lion extends Cat {
  speak() {
    super.speak();
    console.log(`${this.name} roars.`);
  }
}

let l = new Lion('Fuzzy');
l.speak();
// Fuzzy makes a noise.
// Fuzzy roars.







