An arrow function expression is a compact alternative to a traditional function expression, but is limited and can't be used in all situations.

Differences & Limitations:
=========================

Does not have its own bindings to this or super, and should not be used as methods.
Does not have arguments, or new.target keywords.
Not suitable for call, apply and bind methods, which generally rely on establishing a scope.
Can not be used as constructors.
Can not use yield, within its body.


****NOTE:  Arrow functions establish "this" based on the scope the Arrow function is defined within.



Basic syntax
============

// Traditional Function
function (a){
  return a + 100;
}


//Arrow Function
(a) => {
  return a + 100;
}


(a) => a + 100;


a => a + 100;



One param
---------
param => expression


Multiple params
---------------
(param1, paramN) => expression


**Multiline statements require body brackets and return:
--------------------------------------------------------
(param1, paramN) => {
   let a = 1;
   return a + param1 + paramN;
}




Advanced syntax
===============

To return an object literal expression requires parentheses around expression:
-----------------------------------------------------------------------------
params => ({foo: "a"}) // returning the object {foo: "a"}


Rest parameters are supported
-----------------------------
(a, b, ...r) => expression
	 

Default parameters are supported:
--------------------------------
(a=400, b=20, c) => expression

Destructuring within params supported:
--------------------------------------
([a, b] = [10, 20]) => a + b;  // result is 30
({ a, b } = { a: 10, b: 20 }) => a + b; // result is 30





Use of the new operator
=======================
Will throw an error

var Foo = () => {};
var foo = new Foo(); // TypeError: Foo is not a constructor


Use of prototype property
=========================
Arrow functions do not have a prototype property.

var Foo = () => {};
console.log(Foo.prototype); // undefined




No binding of arguments
=======================
Arrow functions do not have their own arguments object. 
In arrow function arguments is a reference to the arguments of the enclosing scope